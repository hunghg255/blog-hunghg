
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
<channel>
  <title>Hung Hoang</title>
  <link>https://blog.hunghg.me/</link>
  <description>Hung Hoang' Blog</description>
  <lastBuildDate>2024-07-17T08:29:49.372Z</lastBuildDate>
  <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
  <generator>https://github.com/jpmonette/feed</generator>
  <image>
    <title>Hung Hoang</title>
    <url>https://blog.hunghg.me/avatar.jpeg</url>
    <link>https://blog.hunghg.me/</link>
  </image>
  <copyright>Copyright 2023 Â© Hung Hoang</copyright>
  <atom:link href="https://blog.hunghg.me/rss.xml" rel="self" type="application/rss+xml"/>


      <item>
    <title>
      <![CDATA[ Markdown Content ]]>
    </title>
    <link>https://blog.hunghg.me/blogs/blog</link>
    <guid>https://blog.hunghg.me/blogs/blog</guid>
    <pubDate>2020-01-01T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[
  blog.ts


    import const MarkdownIt: MarkdownItConstructorMain parser/renderer class.
Usage
// node.js, "classic" way:
var MarkdownIt = require( ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>
  blog.ts


    import const MarkdownIt: MarkdownItConstructorMain parser/renderer class.
Usage
// node.js, "classic" way:
var MarkdownIt = require('markdown-it'),
    md = new MarkdownIt();
var result = md.render('# markdown-it rulezz!');

// node.js, the same, but with sugar:
var md = require('markdown-it')();
var result = md.render('# markdown-it rulezz!');

// browser without AMD, added to "window" on script load
// Note, there are no dash.
var md = window.markdownit();
var result = md.ren</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-markdown-content.png" type="image/png"/>

  </item>

      <item>
    <title>
      <![CDATA[ The Most Popular Build Tools for Front-end Developers in 2023 ]]>
    </title>
    <link>https://blog.hunghg.me/blogs/build-tools-frontend-2023</link>
    <guid>https://blog.hunghg.me/blogs/build-tools-frontend-2023</guid>
    <pubDate>2023-03-19T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ Build tools are software applications that automate the process of building, testing, and deploying front-end code, helping developers to streamline t ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>Build tools are software applications that automate the process of building, testing, and deploying front-end code, helping developers to streamline their workflows and ensure consistent, high-quality results. In this article, we will explore some of the most popular build tools for front-end developers and discuss their key features and benefits.


So, what are build tools, exactly? Well, they're a set of tools that help you automate repetitive tasks, optimize your code, and improve your workfl</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-the-most-popular-build-tools-for-front-end-developers-in-2023.png" type="image/png"/>
    <category>Frontend</category><category>Build tools</category><category>2023</category>
  </item>

      <item>
    <title>
      <![CDATA[ Centering in CSS ]]>
    </title>
    <link>https://blog.hunghg.me/blogs/center-css</link>
    <guid>https://blog.hunghg.me/blogs/center-css</guid>
    <pubDate>2023-05-12T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[
#1. Content Center


  HTML


    &#x3C;div class="content-center">...&#x3C;/div>

    html







  CSS


    .content-center {
   ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>
#1. Content Center


  HTML


    &#x3C;div class="content-center">...&#x3C;/div>

    html







  CSS


    .content-center {
  display: grid;
  place-content: center;
  gap: 1ch;
}

    css





#2. Gentle Flex


  HTML


    &#x3C;div class="gentle-flex">...&#x3C;/div>

    html







  CSS


    .gentle-flex {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 1ch;
}

    css


</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-centering-in-css.png" type="image/png"/>
    <category>html</category><category>css</category><category>tips</category>
  </item>

      <item>
    <title>
      <![CDATA[ Client Side Rendering ]]>
    </title>
    <link>https://blog.hunghg.me/issues/rendering-patterns--client-side-rendering</link>
    <guid>https://blog.hunghg.me/issues/rendering-patterns--client-side-rendering</guid>
    <pubDate>2024-07-17T08:29:49.367Z</pubDate>
    <description>
      <![CDATA[  ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p></p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-client-side-rendering.png" type="image/png"/>
    <category>Rendering Patterns</category>
  </item>

      <item>
    <title>
      <![CDATA[ Compound Pattern ]]>
    </title>
    <link>https://blog.hunghg.me/issues/reactjs--compound-pattern</link>
    <guid>https://blog.hunghg.me/issues/reactjs--compound-pattern</guid>
    <pubDate>2023-05-05T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ Compound Pattern
Create multiple components that work together to perform a single task

#Overview
With the Compound Pattern, we can create multiple c ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>Compound Pattern
Create multiple components that work together to perform a single task

#Overview
With the Compound Pattern, we can create multiple components that work together to perform one single task.
Let's say for example that we have a Search input component. When a user clicks on the search input, we show a SearchPopup component that shows some popular locations.

To create this behavior, we can create a FlyOut compound component.

This FlyOut component is an example of a compound compo</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-compound-pattern.png" type="image/png"/>
    <category>Reactjs</category>
  </item>

      <item>
    <title>
      <![CDATA[ Context API Faster ]]>
    </title>
    <link>https://blog.hunghg.me/issues/state-management--context-fast</link>
    <guid>https://blog.hunghg.me/issues/state-management--context-fast</guid>
    <pubDate>2023-03-23T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #Demo
Context
Source
 ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#Demo
Context
Source
</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-context-api-faster.png" type="image/png"/>
    <category>Reactjs</category><category>State management</category><category>Context API Faster</category>
  </item>

      <item>
    <title>
      <![CDATA[ Context API ]]>
    </title>
    <link>https://blog.hunghg.me/issues/state-management--context</link>
    <guid>https://blog.hunghg.me/issues/state-management--context</guid>
    <pubDate>2023-03-23T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #Demo
Context
Source
 ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#Demo
Context
Source
</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-context-api.png" type="image/png"/>
    <category>Reactjs</category><category>State management</category><category>Context API</category>
  </item>

      <item>
    <title>
      <![CDATA[ Convert svgs file to jsx by one script ]]>
    </title>
    <link>https://blog.hunghg.me/blogs/convert-svgs-to-jsx</link>
    <guid>https://blog.hunghg.me/blogs/convert-svgs-to-jsx</guid>
    <pubDate>2023-04-24T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[
#Run this script on terminal
npm link
#CLI




            npm

            yarn

            pnpm
         ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>
#Run this script on terminal
npm link
#CLI




            npm

            yarn

            pnpm

            bun







     npx agile-svg2jsx --i $PATH_SVGS_FOLDER --o $PATH_REACT_FOLDER

    bash










     yarnx agile-svg2jsx --i $PATH_SVGS_FOLDER --o $PATH_REACT_FOLDER

    bash










     pnpx agile-svg2jsx --i $PATH_SVGS_FOLDER --o $PATH_REACT_FOLDER

    b</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-convert-svgs-file-to-jsx-by-one-script.png" type="image/png"/>
    <category>svg</category><category>jsx</category><category>reactjs</category><category>scripts</category><category>generate</category>
  </item>

      <item>
    <title>
      <![CDATA[ Delay without setTimeout ]]>
    </title>
    <link>https://blog.hunghg.me/issues/javascript--delay-without-set-timeout</link>
    <guid>https://blog.hunghg.me/issues/javascript--delay-without-set-timeout</guid>
    <pubDate>2023-03-20T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ This is a delay function without setTimeout and promise in javascript





    const delay = (time) => {
  const now = Date.now();

  while (true)  ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>This is a delay function without setTimeout and promise in javascript





    const delay = (time) => {
  const now = Date.now();

  while (true) {
    if (Date.now() > now + time) break;
  }
};

console.log('foo');
delay(1000); // 1s
console.log('bar');

    javascript




</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-delay-without-settimeout.png" type="image/png"/>
    <category>Javascript</category><category>Utils</category>
  </item>

      <item>
    <title>
      <![CDATA[ Example Callstack And Event loop ]]>
    </title>
    <link>https://blog.hunghg.me/blogs/event-loop-call-stack-example</link>
    <guid>https://blog.hunghg.me/blogs/event-loop-call-stack-example</guid>
    <pubDate>2023-09-05T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ Example callstack and event loop

#Example





    async function abc() {
  console.log(8);
  await Promise.resolve(2).then(console.log);
  consol ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>Example callstack and event loop

#Example





    async function abc() {
  console.log(8);
  await Promise.resolve(2).then(console.log);
  console.log(3); // same .then(() => console.log(3))
}

setTimeout(() => console.log(1), 0);
abc();
Promise.resolve(4).then(console.log);
console.log(6);

    js





#Information
Note

Macrotasks: setTimeout , setInterval , setImmediate , requestAnimationFrame , I / O , giao diá»n ngÆ°á»i dÃ¹ng render
Microtasks: process.nextTick , Promises ,</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-example-callstack-and-event-loop.png" type="image/png"/>
    <category>javascript</category><category>callstack</category><category>event loop</category>
  </item>

      <item>
    <title>
      <![CDATA[ Xá»­ lÃ½ form vá»i Ant Design (Pháº§n 1) ]]>
    </title>
    <link>https://blog.hunghg.me/blogs/handle-form-antd-part-1</link>
    <guid>https://blog.hunghg.me/blogs/handle-form-antd-part-1</guid>
    <pubDate>2023-03-19T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ CÃ¡ch xá»­ lÃ½ form trong Ant Design sao cho ÄÃºng.

#1. CÆ¡ cháº¿ hoáº¡t Äá»ng
Ta xÃ©t má»t vÃ­ dá»¥ ÄÆ¡n giáº£n nhÆ° sau:





    import { Button, Checkbox, Form, I ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>CÃ¡ch xá»­ lÃ½ form trong Ant Design sao cho ÄÃºng.

#1. CÆ¡ cháº¿ hoáº¡t Äá»ng
Ta xÃ©t má»t vÃ­ dá»¥ ÄÆ¡n giáº£n nhÆ° sau:





    import { Button, Checkbox, Form, Input } from 'antd';

const onFinish = (values) => {
  console.log('Success:', values);
};

const App = () => (
  &#x3C;Form onFinish={onFinish}>
    &#x3C;Form.Item name='username'>
      &#x3C;Input />
    &#x3C;/Form.Item>

    &#x3C;Button type='primary' htmlType='submit'>
      Submit
    &#x3C;/Button>
  &#x3C;/Form>
);

    tsx


  </p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-xu-ly-form-voi-ant-design-phan-1.png" type="image/png"/>
    <category>Reactjs</category><category>Ant Design</category>
  </item>

      <item>
    <title>
      <![CDATA[ Higher-Order Components ]]>
    </title>
    <link>https://blog.hunghg.me/issues/reactjs--hoc-pattern</link>
    <guid>https://blog.hunghg.me/issues/reactjs--hoc-pattern</guid>
    <pubDate>2023-05-05T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ Higher-Order Components
Pass reusable logic down as props to components throughout your application

#Overview
Higher-Order Components (HOC) make it e ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>Higher-Order Components
Pass reusable logic down as props to components throughout your application

#Overview
Higher-Order Components (HOC) make it easy to pass logic to components by wrapping them.
For example, if we wanted to easily change the styles of a text by making the font larger and the font weight bolder, we could create two Higher-Order Components:

withLargeFontSize, which appends the font-size: &quot;90px&quot; field to the style attribute.
withBoldFontWeight, which appends the fon</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-higher-order-components.png" type="image/png"/>
    <category>Reactjs</category>
  </item>

      <item>
    <title>
      <![CDATA[ How to git work? ]]>
    </title>
    <link>https://blog.hunghg.me/issues/git--how-to-git-works</link>
    <guid>https://blog.hunghg.me/issues/git--how-to-git-works</guid>
    <pubDate>2023-03-03T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ sequenceDiagram
    box Local
    participant Working Directory
    participant Staging Area
    participant Local Repo
    end
    box Remote
    par ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>sequenceDiagram
    box Local
    participant Working Directory
    participant Staging Area
    participant Local Repo
    end
    box Remote
    participant Remote Repo
    end
    Working Directory->>Staging Area: git add
    Staging Area->>Local Repo: git commit
    Local Repo->>Remote Repo: git push
    Remote Repo->>Local Repo: git fetch
    Local Repo->>Working Directory: git merge
    Remote Repo->>Working Directory: git pull
    Remote Repo->>Local Repo: git clone
    Local Repo->>Worki</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-how-to-git-work.png" type="image/png"/>
    <category>Git</category>
  </item>

      <item>
    <title>
      <![CDATA[ HTML Input Type ]]>
    </title>
    <link>https://blog.hunghg.me/blogs/html-input</link>
    <guid>https://blog.hunghg.me/blogs/html-input</guid>
    <pubDate>2023-04-13T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #All input type html!






    function App() {
  return (
    &#x3C;div>
      &#x3C;div>
        Button: &#x3C;input type='button' value='Click  ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#All input type html!






    function App() {
  return (
    &#x3C;div>
      &#x3C;div>
        Button: &#x3C;input type='button' value='Click Me!' />
      &#x3C;/div>
      &#x3C;div>
        Checkbox: &#x3C;input type='checkbox' />
      &#x3C;/div>
      &#x3C;div>
        Color: &#x3C;input type='color' />
      &#x3C;/div>
      &#x3C;div>
        Date: &#x3C;input type='date' />
      &#x3C;/div>
      &#x3C;div>
        Date Local: &#x3C;input type='datetime-local' />
      &#x3C;</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-html-input-type.png" type="image/png"/>
    <category>Html</category>
  </item>

      <item>
    <title>
      <![CDATA[ Incremental Static Regeneration ]]>
    </title>
    <link>https://blog.hunghg.me/issues/rendering-patterns--incremental-static-regeneration</link>
    <guid>https://blog.hunghg.me/issues/rendering-patterns--incremental-static-regeneration</guid>
    <pubDate>2024-07-17T08:29:49.368Z</pubDate>
    <description>
      <![CDATA[  ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p></p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-incremental-static-regeneration.png" type="image/png"/>
    <category>Rendering Patterns</category>
  </item>

      <item>
    <title>
      <![CDATA[ Design patterns ]]>
    </title>
    <link>https://blog.hunghg.me/issues/design-patterns--index</link>
    <guid>https://blog.hunghg.me/issues/design-patterns--index</guid>
    <pubDate>2023-04-07T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[
 ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>
</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-design-patterns.png" type="image/png"/>
    <category>Design Patterns</category>
  </item>

      <item>
    <title>
      <![CDATA[ Introduction ]]>
    </title>
    <link>https://blog.hunghg.me/issues/rendering-patterns--intro</link>
    <guid>https://blog.hunghg.me/issues/rendering-patterns--intro</guid>
    <pubDate>2023-03-03T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ Rendering Patterns
Rendering content on the web can be done in many ways. The decision how and where to fetch and render content is key to the perform ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>Rendering Patterns
Rendering content on the web can be done in many ways. The decision how and where to fetch and render content is key to the performance of an application.
The available frameworks and libraries can be used to implement different rendering patterns like Client-Side Rendering, Static Rendering, Incremental Static Regeneration, Progressive Rendering, Server-Side Rendering and many more. Understanding the tradeoffs and use cases for these patterns can drastically help the performa</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-introduction.png" type="image/png"/>
    <category>Rendering Patterns</category>
  </item>

      <item>
    <title>
      <![CDATA[ Jotai ]]>
    </title>
    <link>https://blog.hunghg.me/issues/state-management--jotai</link>
    <guid>https://blog.hunghg.me/issues/state-management--jotai</guid>
    <pubDate>2023-03-23T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #Demo
Jotai
Source
 ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#Demo
Jotai
Source
</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-jotai.png" type="image/png"/>
    <category>Reactjs</category><category>State management</category><category>Jotai</category>
  </item>

      <item>
    <title>
      <![CDATA[ JS Extension - Import/Export Module ]]>
    </title>
    <link>https://blog.hunghg.me/issues/javascript--js-extension-import-export-module</link>
    <guid>https://blog.hunghg.me/issues/javascript--js-extension-import-export-module</guid>
    <pubDate>2023-05-05T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #1. IIFE (Immediately Invoked Function Expression)

Ká»¹ thuáº­t khai bÃ¡o module cho JS thuáº§n (ES5 trá» vá» trÆ°á»c)






    var moduleName = (function ( ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#1. IIFE (Immediately Invoked Function Expression)

Ká»¹ thuáº­t khai bÃ¡o module cho JS thuáº§n (ES5 trá» vá» trÆ°á»c)






    var moduleName = (function () {
  // return something to export
})();

    js





#2. CJS (CommonJS)

CÃº phÃ¡p khai bÃ¡o module ÄÆ°á»£c sá»­ dá»¥ng dÆ°á»i back-end (phá» biáº¿n nháº¥t lÃ  NodeJS)
CÃ¡c module ÄÆ°á»£c import má»t cÃ¡ch Äá»ng bá»






    // export
module.exports = factory;

// import
var alias = require('./moduleName');

    js





#3. AMD (Asynchr</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-js-extension-import-export-module.png" type="image/png"/>
    <category>Reactjs</category>
  </item>

      <item>
    <title>
      <![CDATA[ Question 1 - 10 ]]>
    </title>
    <link>https://blog.hunghg.me/javascript/question-1</link>
    <guid>https://blog.hunghg.me/javascript/question-1</guid>
    <pubDate>2023-03-02T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #Q1. What's the output?





    function sayHi() {
  console.log(name);
  console.log(age);
  var name = 'Lydia';
  let age = 21;
}

sayHi();

    ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#Q1. What's the output?





    function sayHi() {
  console.log(name);
  console.log(age);
  var name = 'Lydia';
  let age = 21;
}

sayHi();

    javascript






A: Lydia and undefined
B: Lydia and ReferenceError
C: ReferenceError and 21
D: undefined and ReferenceError



    ð¡ Answer

Answer: D
Within the function, we first declare the name variable with the var keyword. This means that the variable gets hoisted (memory space is set up during the creation phase) wit</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-question-1-10.png" type="image/png"/>
    <category>Javascript</category>
  </item>

      <item>
    <title>
      <![CDATA[ Question 91 - 100 ]]>
    </title>
    <link>https://blog.hunghg.me/javascript/question-10</link>
    <guid>https://blog.hunghg.me/javascript/question-10</guid>
    <pubDate>2023-03-02T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #91. What's the output?





    let newList = [1, 2, 3].push(4);

console.log(newList.push(5));

    javascript






A: [1, 2, 3, ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#91. What's the output?





    let newList = [1, 2, 3].push(4);

console.log(newList.push(5));

    javascript






A: [1, 2, 3, 4, 5]
B: [1, 2, 3, 5]
C: [1, 2, 3, 4]
D: Error



Answer


Answer: D
The .push method returns the new length of the array, not the array itself! By setting newList equal to [1, 2, 3].push(4), we set newList equal to the new length of the array: 4.
Then, we try to use the .push method on newList. Since newList is the numerical value 4, we cannot us</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-question-91-100.png" type="image/png"/>
    <category>Javascript</category>
  </item>

      <item>
    <title>
      <![CDATA[ Question 101 - 110 ]]>
    </title>
    <link>https://blog.hunghg.me/javascript/question-11</link>
    <guid>https://blog.hunghg.me/javascript/question-11</guid>
    <pubDate>2023-03-02T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #101. What's the value of output?





    const one = false || {} || null;
const two = null || false || '';
const three = [] || 0 || true;

consol ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#101. What's the value of output?





    const one = false || {} || null;
const two = null || false || '';
const three = [] || 0 || true;

console.log(one, two, three);

    javascript






A: false null []
B: null &quot;&quot; true
C: {} &quot;&quot; []
D: null null true



Answer


Answer: C
With the || operator, we can return the first truthy operand. If all values are falsy, the last operand gets returned.
(false || {} || null): the empty object {} is a truthy value. Th</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-question-101-110.png" type="image/png"/>
    <category>Javascript</category>
  </item>

      <item>
    <title>
      <![CDATA[ Question 111 - 120 ]]>
    </title>
    <link>https://blog.hunghg.me/javascript/question-12</link>
    <guid>https://blog.hunghg.me/javascript/question-12</guid>
    <pubDate>2023-03-02T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #111. What's the output?





    let name = 'Lydia';

function getName() {
  console.log(name);
  let name = 'Sarah';
}

getName();

    javascrip ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#111. What's the output?





    let name = 'Lydia';

function getName() {
  console.log(name);
  let name = 'Sarah';
}

getName();

    javascript






A: Lydia
B: Sarah
C: undefined
D: ReferenceError



Answer


Answer: D
Each function has its own execution context (or scope). The getName function first looks within its own context (scope) to see if it contains the variable name we're trying to access. In this case, the getName function contains its own name variable: we d</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-question-111-120.png" type="image/png"/>
    <category>Javascript</category>
  </item>

      <item>
    <title>
      <![CDATA[ Question 121 - 130 ]]>
    </title>
    <link>https://blog.hunghg.me/javascript/question-13</link>
    <guid>https://blog.hunghg.me/javascript/question-13</guid>
    <pubDate>2023-03-02T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #121. What's the output?





    const config = {
  languages: [],
  set language(lang) {
    return this.languages.push(lang);
  },
};

console.l ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#121. What's the output?





    const config = {
  languages: [],
  set language(lang) {
    return this.languages.push(lang);
  },
};

console.log(config.language);

    javascript






A: function language(lang) { this.languages.push(lang }
B: 0
C: []
D: undefined



ÄÃ¡p Ã¡n


Answer: D
The language method is a setter. Setters don't hold an actual value, their purpose is to modify properties. When calling a setter method, undefined gets returned.



#122. What's the output</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-question-121-130.png" type="image/png"/>
    <category>Javascript</category>
  </item>

      <item>
    <title>
      <![CDATA[ Question 131 - 140 ]]>
    </title>
    <link>https://blog.hunghg.me/javascript/question-14</link>
    <guid>https://blog.hunghg.me/javascript/question-14</guid>
    <pubDate>2023-03-02T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #131. What's the output?





    const emojis = ['ð¥', ['â¨', 'â¨', ['ð', 'ð']]];

console.log(emojis.flat(1));

    javascript



  ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#131. What's the output?





    const emojis = ['ð¥', ['â¨', 'â¨', ['ð', 'ð']]];

console.log(emojis.flat(1));

    javascript






A: ['ð¥', ['â¨', 'â¨', ['ð', 'ð']]]
B: ['ð¥', 'â¨', 'â¨', ['ð', 'ð']]
C: ['ð¥', ['â¨', 'â¨', 'ð', 'ð']]
D: ['ð¥', 'â¨', 'â¨', 'ð', 'ð']



Answer


Answer: B
With the flat method, we can create a new, flattened array. The depth of the flattened array depends on the value that we pass. In this case, we passed the value 1 (which we didn't have to</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-question-131-140.png" type="image/png"/>
    <category>Javascript</category>
  </item>

      <item>
    <title>
      <![CDATA[ Question 141 - 150 ]]>
    </title>
    <link>https://blog.hunghg.me/javascript/question-15</link>
    <guid>https://blog.hunghg.me/javascript/question-15</guid>
    <pubDate>2023-03-02T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #141. What's the output?





    const person = {
  name: 'Lydia Hallie',
  hobbies: ['coding'],
};

function addHobby(hobby, hobbies = person.hob ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#141. What's the output?





    const person = {
  name: 'Lydia Hallie',
  hobbies: ['coding'],
};

function addHobby(hobby, hobbies = person.hobbies) {
  hobbies.push(hobby);
  return hobbies;
}

addHobby('running', []);
addHobby('dancing');
addHobby('baking', person.hobbies);

console.log(person.hobbies);

    javascript






A: [&quot;coding&quot;]
B: [&quot;coding&quot;, &quot;dancing&quot;]
C: [&quot;coding&quot;, &quot;dancing&quot;, &quot;baking&quot;]
D: [&quot;codi</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-question-141-150.png" type="image/png"/>
    <category>Javascript</category>
  </item>

      <item>
    <title>
      <![CDATA[ Question 151 - 155 ]]>
    </title>
    <link>https://blog.hunghg.me/javascript/question-16</link>
    <guid>https://blog.hunghg.me/javascript/question-16</guid>
    <pubDate>2023-03-02T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #150. What's the output?





    const animals = {};
let dog = { emoji: 'ð¶' };
let cat = { emoji: 'ð' };

animals[dog] = { ...dog, name: 'Mara'  ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#150. What's the output?





    const animals = {};
let dog = { emoji: 'ð¶' };
let cat = { emoji: 'ð' };

animals[dog] = { ...dog, name: 'Mara' };
animals[cat] = { ...cat, name: 'Sara' };

console.log(animals[dog]);

    javascript






A: { emoji: &quot;ð¶&quot;, name: &quot;Mara&quot; }
B: { emoji: &quot;ð&quot;, name: &quot;Sara&quot; }
C: undefined
D: ReferenceError



Answer


Answer: B
Object keys are converted to strings.
Since the value of dog is an object, animal</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-question-151-155.png" type="image/png"/>
    <category>Javascript</category>
  </item>

      <item>
    <title>
      <![CDATA[ Question 11 - 20 ]]>
    </title>
    <link>https://blog.hunghg.me/javascript/question-2</link>
    <guid>https://blog.hunghg.me/javascript/question-2</guid>
    <pubDate>2023-03-02T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #Q11. What is the output?





    function Person(firstName, lastName) {
  this.firstName = firstName;
  this.lastName = lastName;
}

const member ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#Q11. What is the output?





    function Person(firstName, lastName) {
  this.firstName = firstName;
  this.lastName = lastName;
}

const member = new Person('Lydia', 'Hallie');
Person.getFullName = function () {
  return `${this.firstName} ${this.lastName}`;
};

console.log(member.getFullName());

    javascript






A: TypeError
B: SyntaxError
C: Lydia Hallie
D: undefined undefined



    ð¡ Answer

Answer: A
In JavaScript, functions are objects, and therefore, </p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-question-11-20.png" type="image/png"/>
    <category>Javascript</category>
  </item>

      <item>
    <title>
      <![CDATA[ Question 21 - 30 ]]>
    </title>
    <link>https://blog.hunghg.me/javascript/question-3</link>
    <guid>https://blog.hunghg.me/javascript/question-3</guid>
    <pubDate>2023-03-02T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #Q21. What's the value of sum?





    const sum = eval('10*10+5');

    javascript






A: 105
B: &quot;105&quot;
C: TypeError
D ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#Q21. What's the value of sum?





    const sum = eval('10*10+5');

    javascript






A: 105
B: &quot;105&quot;
C: TypeError
D: &quot;10*10+5&quot;



    ð¡ Answer

Answer: A
eval evaluates codes that's passed as a string. If it's an expression, like in this case, it evaluates the expression. The expression is 10 * 10 + 5. This returns the number 105.

#Q22. How long is cool_secret accessible?





    sessionStorage.setItem('cool_secret', 123);

    javascrip</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-question-21-30.png" type="image/png"/>
    <category>Javascript</category>
  </item>

      <item>
    <title>
      <![CDATA[ Question 31 - 40 ]]>
    </title>
    <link>https://blog.hunghg.me/javascript/question-4</link>
    <guid>https://blog.hunghg.me/javascript/question-4</guid>
    <pubDate>2023-03-02T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #Q. 31. What is the event.target when clicking the button?





    &#x3C;div onclick="console.log('first div')">
  &#x3C;div onclick="console.log( ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#Q. 31. What is the event.target when clicking the button?





    &#x3C;div onclick="console.log('first div')">
  &#x3C;div onclick="console.log('second div')">
    &#x3C;button onclick="console.log('button')">Click!&#x3C;/button>
  &#x3C;/div>
&#x3C;/div>

    html






A: Outer div
B: Inner div
C: button
D: An array of all nested elements.



    ð¡ Answer

Answer: C
The deepest nested element that caused the event is the target of the event. You can stop bubbling</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-question-31-40.png" type="image/png"/>
    <category>Javascript</category>
  </item>

      <item>
    <title>
      <![CDATA[ Question 41 - 50 ]]>
    </title>
    <link>https://blog.hunghg.me/javascript/question-5</link>
    <guid>https://blog.hunghg.me/javascript/question-5</guid>
    <pubDate>2023-03-02T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #Q. 41. What's the output?





    !!null;
!!'';
!!1;

    javascript






A: false, true, false
B: false, false, true
C: false,  ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#Q. 41. What's the output?





    !!null;
!!'';
!!1;

    javascript






A: false, true, false
B: false, false, true
C: false, true, true
D: true, true, false



    ð¡ Answer

Answer: B
null is falsy. !null returns true. !true returns false.
&quot;&quot; is falsy. !&quot;&quot; returns true. !true returns false.
1 is truthy. !1 returns false. !false returns true.

#Q. 42. What does the setInterval method return in the browser?





    setInterval(() => console</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-question-41-50.png" type="image/png"/>
    <category>Javascript</category>
  </item>

      <item>
    <title>
      <![CDATA[ Question 51 - 60 ]]>
    </title>
    <link>https://blog.hunghg.me/javascript/question-6</link>
    <guid>https://blog.hunghg.me/javascript/question-6</guid>
    <pubDate>2023-03-02T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #51. What's the output?





    function getInfo(member, year) {
  member.name = 'Lydia';
  year = '1998';
}

const person = { name: 'Sarah' };
co ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#51. What's the output?





    function getInfo(member, year) {
  member.name = 'Lydia';
  year = '1998';
}

const person = { name: 'Sarah' };
const birthYear = '1997';

getInfo(person, birthYear);

console.log(person, birthYear);

    javascript






A: { name: &quot;Lydia&quot; }, &quot;1997&quot;
B: { name: &quot;Sarah&quot; }, &quot;1998&quot;
C: { name: &quot;Lydia&quot; }, &quot;1998&quot;
D: { name: &quot;Sarah&quot; }, &quot;1997&quot;



Answer


Answer: A
Argument</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-question-51-60.png" type="image/png"/>
    <category>Javascript</category>
  </item>

      <item>
    <title>
      <![CDATA[ Question 61 - 70 ]]>
    </title>
    <link>https://blog.hunghg.me/javascript/question-7</link>
    <guid>https://blog.hunghg.me/javascript/question-7</guid>
    <pubDate>2023-03-02T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #61. What's the output?





    const person = { name: 'Lydia' };

Object.defineProperty(person, 'age', { value: 21 });

console.log(person);
cons ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#61. What's the output?





    const person = { name: 'Lydia' };

Object.defineProperty(person, 'age', { value: 21 });

console.log(person);
console.log(Object.keys(person));

    javascript






A: { name: &quot;Lydia&quot;, age: 21 }, [&quot;name&quot;, &quot;age&quot;]
B: { name: &quot;Lydia&quot;, age: 21 }, [&quot;name&quot;]
C: { name: &quot;Lydia&quot;}, [&quot;name&quot;, &quot;age&quot;]
D: { name: &quot;Lydia&quot;}, [&quot;age&quot;]



Answer


Answer: B
With th</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-question-61-70.png" type="image/png"/>
    <category>Javascript</category>
  </item>

      <item>
    <title>
      <![CDATA[ Question 71 - 80 ]]>
    </title>
    <link>https://blog.hunghg.me/javascript/question-8</link>
    <guid>https://blog.hunghg.me/javascript/question-8</guid>
    <pubDate>2023-03-02T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #71. How can we log the values that are commented out after the console.log statement?





    function* startGame() {
  const answer = yield 'Do  ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#71. How can we log the values that are commented out after the console.log statement?





    function* startGame() {
  const answer = yield 'Do you love JavaScript?';
  if (answer !== 'Yes') {
    return "Oh wow... Guess we're gone here";
  }
  return 'JavaScript loves you back â¤ï¸';
}

const game = startGame();
console.log(/* 1 */); // Do you love JavaScript?
console.log(/* 2 */); // JavaScript loves you back â¤ï¸

    javascript






A: game.next(&quot;Yes&quot;).value and </p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-question-71-80.png" type="image/png"/>
    <category>Javascript</category>
  </item>

      <item>
    <title>
      <![CDATA[ Question 81 - 90 ]]>
    </title>
    <link>https://blog.hunghg.me/javascript/question-9</link>
    <guid>https://blog.hunghg.me/javascript/question-9</guid>
    <pubDate>2023-03-02T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #81. What is the output?





    function sayHi(name) {
  return `Hi there, ${name}`;
}

console.log(sayHi());

    javascript



   ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#81. What is the output?





    function sayHi(name) {
  return `Hi there, ${name}`;
}

console.log(sayHi());

    javascript






A: Hi there,
B: Hi there, undefined
C: Hi there, null
D: ReferenceError



ÄÃ¡p Ã¡n


Answer: B
By default, arguments have the value of undefined, unless a value has been passed to the function. In this case, we didn't pass a value for the name argument. name is equal to undefined which gets logged.
In ES6, we can overwrite this default undefined </p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-question-81-90.png" type="image/png"/>
    <category>Javascript</category>
  </item>

      <item>
    <title>
      <![CDATA[ Random ]]>
    </title>
    <link>https://blog.hunghg.me/issues/javascript--random</link>
    <guid>https://blog.hunghg.me/issues/javascript--random</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #Generate a random integer in given range




            js

            ts







    c ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#Generate a random integer in given range




            js

            ts







    const randomInteger = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

    js










    const randomInteger = (min: number, max: number): number =>
  Math.floor(Math.random() * (max - min + 1)) + min;

    ts






#Sort an object by its properties




            js
         </p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-random.png" type="image/png"/>
    <category>Javascript</category><category>1loc</category><category>Random</category>
  </item>

      <item>
    <title>
      <![CDATA[ RC Component ]]>
    </title>
    <link>https://blog.hunghg.me/issues/reactjs--rc-component</link>
    <guid>https://blog.hunghg.me/issues/reactjs--rc-component</guid>
    <pubDate>2023-04-25T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #rc-dialog

Install





            npm

            yarn

            pnpm

            bun
   ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#rc-dialog

Install





            npm

            yarn

            pnpm

            bun







     npm install rc-dialog

    bash










     yarn add rc-dialog

    bash










     pnpm i rc-dialog

    bash










     bun install rc-dialog

    bash







Add CSS CDN into html file






    &#x3C;link rel="styleshe</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-rc-component.png" type="image/png"/>
    <category>rc-dialog</category><category>rc-picker</category><category>rc-select</category><category>rc-tooltip</category><category>Style</category><category>CSS</category><category>rc-component</category>
  </item>

      <item>
    <title>
      <![CDATA[ React Provider Hell ]]>
    </title>
    <link>https://blog.hunghg.me/blogs/react-provider-hell</link>
    <guid>https://blog.hunghg.me/blogs/react-provider-hell</guid>
    <pubDate>2023-09-19T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ React Provider Hell

#Issue





    const context1 = createContext({});
const context2 = createContext({});
const context3 = createContext({});
co ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>React Provider Hell

#Issue





    const context1 = createContext({});
const context2 = createContext({});
const context3 = createContext({});
const context4 = createContext({});

const ChildApp = () => {
  const v1 = useContext(context1);
  const v2 = useContext(context2);
  const v3 = useContext(context3);
  const v4 = useContext(context4);

  return (
    &#x3C;>
      &#x3C;h2>ChildApp&#x3C;/h2>
      {v1.v}
      {v2.v}
      {v3.v}
      {v4.v}
    &#x3C;/>
  );
};

const App = () => </p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-react-provider-hell.png" type="image/png"/>
    <category>react</category><category>provider</category>
  </item>

      <item>
    <title>
      <![CDATA[ Recoil ]]>
    </title>
    <link>https://blog.hunghg.me/issues/state-management--recoil</link>
    <guid>https://blog.hunghg.me/issues/state-management--recoil</guid>
    <pubDate>2023-03-23T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #Demo
Recoil
Source
 ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#Demo
Recoil
Source
</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-recoil.png" type="image/png"/>
    <category>Reactjs</category><category>State management</category><category>Recoil</category>
  </item>

      <item>
    <title>
      <![CDATA[ Redux ]]>
    </title>
    <link>https://blog.hunghg.me/issues/state-management--redux</link>
    <guid>https://blog.hunghg.me/issues/state-management--redux</guid>
    <pubDate>2023-03-23T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #Demo
Redux
Source
 ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#Demo
Redux
Source
</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-redux.png" type="image/png"/>
    <category>Reactjs</category><category>State management</category><category>Redux</category>
  </item>

      <item>
    <title>
      <![CDATA[ Scroll Restoration in Nextjs ]]>
    </title>
    <link>https://blog.hunghg.me/blogs/scroll-restoration-nextjs</link>
    <guid>https://blog.hunghg.me/blogs/scroll-restoration-nextjs</guid>
    <pubDate>2023-04-07T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #Experimental scroll restoration flag
Luckily, Next.js has an experimental scrollRestoration flag that you can enable to automatically restore the scr ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#Experimental scroll restoration flag
Luckily, Next.js has an experimental scrollRestoration flag that you can enable to automatically restore the scroll positions.

You can enable it in your next.config.js file this way:


  next.config.js


    module.exports = {
  experimental: {
    scrollRestoration: true,
  },
};

    js





#next-router-scroll
There are some cases where you need to take control of how your application scroll is handled; namely, you may want to restore sc</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-scroll-restoration-in-nextjs.png" type="image/png"/>
    <category>Nextjs</category><category>Scroll Restoration</category>
  </item>

      <item>
    <title>
      <![CDATA[ Server Side Rendering ]]>
    </title>
    <link>https://blog.hunghg.me/issues/rendering-patterns--server-side-rendering</link>
    <guid>https://blog.hunghg.me/issues/rendering-patterns--server-side-rendering</guid>
    <pubDate>2024-07-17T08:29:49.370Z</pubDate>
    <description>
      <![CDATA[  ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p></p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-server-side-rendering.png" type="image/png"/>
    <category>Rendering Patterns</category>
  </item>

      <item>
    <title>
      <![CDATA[ Sleep Sort ]]>
    </title>
    <link>https://blog.hunghg.me/issues/javascript--sleep-sort</link>
    <guid>https://blog.hunghg.me/issues/javascript--sleep-sort</guid>
    <pubDate>2023-10-14T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    async function sleepSort(arr) {
  const r = [];

  const promises = arr.map(
    (n) =>
      new Promise((resolve) =>
        setTimeout(( ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    async function sleepSort(arr) {
  const r = [];

  const promises = arr.map(
    (n) =>
      new Promise((resolve) =>
        setTimeout(() => {
          r.push(n);
          resolve(null);
        }, n),
      ),
  );

  await Promise.all(promises);

  return r;
}

    js




</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-sleep-sort.png" type="image/png"/>
    <category>Javascript</category><category>sort</category>
  </item>

      <item>
    <title>
      <![CDATA[ Split Text Utils ]]>
    </title>
    <link>https://blog.hunghg.me/issues/javascript--split-text-utils</link>
    <guid>https://blog.hunghg.me/issues/javascript--split-text-utils</guid>
    <pubDate>2023-09-05T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    function verifyString(
  data,
  error = Error,
  errorMessage = `Expected a string, got ${data} instead.`,
  allowEmpty = true,
) {
  if ( ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    function verifyString(
  data,
  error = Error,
  errorMessage = `Expected a string, got ${data} instead.`,
  allowEmpty = true,
) {
  if (typeof data !== 'string') throw new error(errorMessage);
  if (!allowEmpty &#x26;&#x26; data.length === 0) throw new error(errorMessage);
  return data;
}

let deprecationEmittedForSplitMessage = false;
function splitMessage(text, { maxLength = 2_000, char = '\n', prepend = '', append = '' } = {}) {
  if (!deprecationEmittedForSplitMessage) {
    p</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-split-text-utils.png" type="image/png"/>
    <category>Javascript</category><category>Utils</category><category>Discord</category>
  </item>

      <item>
    <title>
      <![CDATA[ State Managers ]]>
    </title>
    <link>https://blog.hunghg.me/issues/reactjs--state-managers</link>
    <guid>https://blog.hunghg.me/issues/reactjs--state-managers</guid>
    <pubDate>2023-03-30T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #1. Overview


#a. Reactive State Management

#b. Atomic State Management

#c. Uni-Directional State Management

#d. Bi-Directional State Management

 ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#1. Overview


#a. Reactive State Management

#b. Atomic State Management

#c. Uni-Directional State Management

#d. Bi-Directional State Management

#2. Reference



Category
Name
Libraries
Downloads




Hooks
Prop Drilling
Prop Drilling



Hooks
Context
Context



Hooks
Global State
React Hooks Global State



Hooks
Hookstate
Hookstate



Hooks
Teaful
Teaful



FSM
XState
XState



API+
React Query
React Query



Reactive
Effector
Effector



Reactive
Akita
Akita



Reactive
Rxjs
Observable Ho</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-state-managers.png" type="image/png"/>
    <category>Reactjs</category><category>State managers</category>
  </item>

      <item>
    <title>
      <![CDATA[ Static Rendering ]]>
    </title>
    <link>https://blog.hunghg.me/issues/rendering-patterns--static-rendering</link>
    <guid>https://blog.hunghg.me/issues/rendering-patterns--static-rendering</guid>
    <pubDate>2024-07-17T08:29:49.370Z</pubDate>
    <description>
      <![CDATA[  ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p></p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-static-rendering.png" type="image/png"/>
    <category>Rendering Patterns</category>
  </item>

      <item>
    <title>
      <![CDATA[ Streaming Server Side Rendering ]]>
    </title>
    <link>https://blog.hunghg.me/issues/rendering-patterns--streaming-ssr</link>
    <guid>https://blog.hunghg.me/issues/rendering-patterns--streaming-ssr</guid>
    <pubDate>2024-07-17T08:29:49.371Z</pubDate>
    <description>
      <![CDATA[  ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p></p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-streaming-server-side-rendering.png" type="image/png"/>
    <category>Rendering Patterns</category>
  </item>

      <item>
    <title>
      <![CDATA[ SVG icon with pure css ]]>
    </title>
    <link>https://blog.hunghg.me/blogs/svg-icon-with-pure-css</link>
    <guid>https://blog.hunghg.me/blogs/svg-icon-with-pure-css</guid>
    <pubDate>2023-12-20T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #SVG icon with pure css



CÃ¡ch cÆ¡ báº£n: DÃ¹ng svg qua tháº» img hoáº·c lÃ  dÃ¹ng content cá»§a svg trong html


CÃ¡ch tiáº¿p cáº­n tiáº¿p theo lÃ  chuyá»n háº¿t svg icon  ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#SVG icon with pure css



CÃ¡ch cÆ¡ báº£n: DÃ¹ng svg qua tháº» img hoáº·c lÃ  dÃ¹ng content cá»§a svg trong html


CÃ¡ch tiáº¿p cáº­n tiáº¿p theo lÃ  chuyá»n háº¿t svg icon thÃ nh má»t bá» font rá»i load bá» font,css ÄÃ³ vÃ o source code, sá»­ dÃ¹ng bÃªn html chá» cáº§n thÃªm class cá»§a icon.

CÃ¡ch nÃ y sáº½ cÃ³ nhÆ°á»£c ÄiÃªm lÃ  khÃ´ng convert ÄÆ°á»£c icon multilplechrome



CÃ¡ch tiáº¿p theo lÃ  chá» cáº§n chuyá»n svg thÃ nh dataURI rá»i dÃ¹ng trong css, bÃªn html sáº½ thÃªm class icon

CÅ©ng cÃ³ má»t source há» dá»±ng svg dÃ¹ng vá»i css css.gg nhÆ°ng bá» giá»i háº¡n ico</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-svg-icon-with-pure-css.png" type="image/png"/>
    <category>svg</category><category>icon</category><category>css</category>
  </item>

      <item>
    <title>
      <![CDATA[ Tools ]]>
    </title>
    <link>https://blog.hunghg.me/tools/tools</link>
    <guid>https://blog.hunghg.me/tools/tools</guid>
    <pubDate>2024-07-17T08:06:03.272Z</pubDate>
    <description>
      <![CDATA[ #Rspress Plugin



handbook
Github
Npm
Stars
Last Commit
Download
Version




rspress-plugin-mention-github
#Github
#Npm






rspress-plugin-shiki
#G ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#Rspress Plugin



handbook
Github
Npm
Stars
Last Commit
Download
Version




rspress-plugin-mention-github
#Github
#Npm






rspress-plugin-shiki
#Github
#Npm







#Rsbuild Plugin



handbook
Github
Npm
Stars
Last Commit
Download
Version




rsbuild-plugin-react-inspector
#Github
#Npm






rsbuild-plugin-svelte-inspector
#Github
#Npm






rsbuild-plugin-vue-inspector
#Github
#Npm






rsbuild-plugin-print
#Github
#Npm






rsbuild-plugin-console-debug
#Github
#Npm







#Vite Plugin



</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-tools.png" type="image/png"/>

  </item>

      <item>
    <title>
      <![CDATA[ useClickOutside ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--use-click-outside</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--use-click-outside</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    const useEventListener = (eventType, callback, element = window) => {
  const refCallback = useRef(callback);

  useEffect(() => {
    refC ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    const useEventListener = (eventType, callback, element = window) => {
  const refCallback = useRef(callback);

  useEffect(() => {
    refCallback.current = callback;
  }, [callback]);

  useEffect(() => {
    const handler = (e) => refCallback.current(e);
    element.addEventListener(eventType, handler);
    return () => element.removeEventListener(eventType, handler);
  }, [eventType, element]);
};

const useClickOutside = (ref, cb) => {
  useEventListener('click', (e) => {
    if (</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-useclickoutside.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useClickOutside</category>
  </item>

      <item>
    <title>
      <![CDATA[ useCountDown ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--use-count-down</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--use-count-down</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    const useCountDown = ({ startDate, endDate, onFinish }) => {
  const [seconds, setSeconds] = useState(0);
  const refDays = useRef(0);
  co ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    const useCountDown = ({ startDate, endDate, onFinish }) => {
  const [seconds, setSeconds] = useState(0);
  const refDays = useRef(0);
  const refHours = useRef(0);
  const refMinutes = useRef(0);

  const startTime = useMemo(() => new Date(startDate), [startDate]);
  const endTime = useMemo(() => new Date(endDate), [endDate]);
  const refEnd = useRef();

  useEffect(() => {
    if (!refEnd.current) return;
    onFinish &#x26;&#x26; onFinish();
  }, [onFinish, refEnd]);

  useEffect((</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usecountdown.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useCountDown</category>
  </item>

      <item>
    <title>
      <![CDATA[ useDebounce ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--use-debounce</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--use-debounce</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    const useTimeout = (callback, delay) => {
  const refCallback = useRef();
  const refTimeout = useRef();

  useEffect(() => {
    refCallba ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    const useTimeout = (callback, delay) => {
  const refCallback = useRef();
  const refTimeout = useRef();

  useEffect(() => {
    refCallback.current = callback;
  }, [callback]);

  const set = useCallback(() => {
    refTimeout.current = setTimeout(() => refCallback.current(), delay);
  }, [delay]);

  const clear = useCallback(() => {
    refTimeout.current &#x26;&#x26; clearTimeout(refTimeout.current);
  }, []);

  useEffect(() => {
    set();
    return clear;
  }, [delay, set, c</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usedebounce.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useDebounce</category>
  </item>

      <item>
    <title>
      <![CDATA[ useDeepEffect ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--use-deep-effect</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--use-deep-effect</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    function deepCompareEquals(a, b) {
  // return isEqual(a, b); // lodash func
  return JSON.stringify(a) === JSON.stringify(b);
}

function  ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    function deepCompareEquals(a, b) {
  // return isEqual(a, b); // lodash func
  return JSON.stringify(a) === JSON.stringify(b);
}

function useDeepCompareMemoize(value) {
  const ref = useRef();

  if (!deepCompareEquals(value, ref.current)) {
    ref.current = value;
  }

  return ref.current;
}

const useDeepEffect = (callback, dependencies) => {
  useEffect(callback, dependencies.map(useDeepCompareMemoize));
};

const App = () => {
  const [obj, setObj] = useState({ a: 1 });
  const</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usedeepeffect.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useDeepEffect</category>
  </item>

      <item>
    <title>
      <![CDATA[ useFetch ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--use-fetch</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--use-fetch</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    const useAsync = (callback, dependencies = []) => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(); ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    const useAsync = (callback, dependencies = []) => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState();
  const [value, setValue] = useState();

  const callbackMemoized = useCallback(() => {
    setLoading(true);
    setError(undefined);
    setValue(undefined);
    callback()
      .then(setValue)
      .catch(setError)
      .finally(() => setLoading(false));
  }, dependencies);

  useEffect(() => {
    callbackMemoized();
  }, [callbackMemoized]</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usefetch.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useFetch</category>
  </item>

      <item>
    <title>
      <![CDATA[ useGeolocation ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--use-geolocation</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--use-geolocation</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    const useGeolocation = (options) => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState();
  const [data ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    const useGeolocation = (options) => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState();
  const [data, setData] = useState({});

  useEffect(() => {
    const successHandler = (e) => {
      setLoading(false);
      setError(null);
      setData(e.coords);
    };
    const errorHandler = (e) => {
      setLoading(false);
      setError(e);
    };

    navigator.geolocation.getCurrentPosition(successHandler, errorHandler, options);

    const id = </p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usegeolocation.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useGeolocation</category>
  </item>

      <item>
    <title>
      <![CDATA[ useMediaQuery ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--use-media-query</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--use-media-query</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    function debounce(func, timeout = 300) {
  let timer;
  return function (...args) {
    if (timer) {
      clearTimeout(timer);
    }

     ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    function debounce(func, timeout = 300) {
  let timer;
  return function (...args) {
    if (timer) {
      clearTimeout(timer);
    }

    timer = setTimeout(() => {
      func.apply(this, args);
    }, timeout);
  };
}

const useEventListener = (eventType, callback, element = window) => {
  const refCallback = useRef(callback);

  useEffect(() => {
    refCallback.current = callback;
  }, [callback]);

  useEffect(() => {
    const handler = (e) => refCallback.current(e);
    element</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usemediaquery.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useMediaQuery</category>
  </item>

      <item>
    <title>
      <![CDATA[ useMergeRefs ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--use-merge-ref</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--use-merge-ref</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    function mergeRefs(...args) {
  let a = arguments.length,
    c = new Array(a);
  for (let d = 0; d &#x3C; a; d++) c[d] = arguments[d];
  r ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    function mergeRefs(...args) {
  let a = arguments.length,
    c = new Array(a);
  for (let d = 0; d &#x3C; a; d++) c[d] = arguments[d];
  return function (a) {
    c.forEach(function (c) {
      if (c == null) return;
      if (typeof c === 'function') {
        c(a);
        return;
      }
      if (typeof c === 'object') {
        c.current = a;
        return;
      }
      console.warn(
        'mergeRefs cannot handle Refs of type boolean, number or string, received ref ' + Stri</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usemergerefs.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useMergeRefs</category>
  </item>

      <item>
    <title>
      <![CDATA[ usePrevious ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--use-previous</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--use-previous</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    const usePrevious = (value) => {
  const refCurrent = useRef(value);
  const refPrevious = useRef();

  if (refCurrent.current !== value) { ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    const usePrevious = (value) => {
  const refCurrent = useRef(value);
  const refPrevious = useRef();

  if (refCurrent.current !== value) {
    refPrevious.current = refCurrent.current;
    refCurrent.current = value;
  }

  return refPrevious.current;
};

const App = () => {
  const [count, setCount] = useState(0);
  const [name, setName] = useState('Kyle');
  const previousCount = usePrevious(count);

  return (
    &#x3C;>
      &#x3C;div>
        {count} - {previousCount}
      &#</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-useprevious.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>usePrevious</category>
  </item>

      <item>
    <title>
      <![CDATA[ useSize ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--use-size</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--use-size</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    const useSize = (ref) => {
  const [size, setSize] = useState({});

  useEffect(() => {
    if (ref.current == null) return;
    const obse ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    const useSize = (ref) => {
  const [size, setSize] = useState({});

  useEffect(() => {
    if (ref.current == null) return;
    const observer = new ResizeObserver(([entry]) => setSize(entry.contentRect));
    observer.observe(ref.current);
    return () => observer.disconnect();
  }, []);

  return size;
};

const App = () => {
  const ref = useRef();
  const size = useSize(ref);

  return (
    &#x3C;>
      &#x3C;div>{JSON.stringify(size)}&#x3C;/div>
      &#x3C;textarea ref={ref}</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usesize.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useSize</category>
  </item>

      <item>
    <title>
      <![CDATA[ useStateProxy ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--use-state-proxy</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--use-state-proxy</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ This is a custom hook to mutate state in reactjs





    const useStateProxy = (initialValues) => {
  const [, setTime] = useState({});

  return  ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>This is a custom hook to mutate state in reactjs





    const useStateProxy = (initialValues) => {
  const [, setTime] = useState({});

  return useMemo(() => {
    return new Proxy(initialValues, {
      set: (obj, prop, value) => {
        obj[prop] = value;
        setTime({});

        return true;
      },
    });
  }, []);
};

function App() {
  const state = useStateProxy({ count: 0 });

  return (
    &#x3C;div>
      &#x3C;h1>{state.count}&#x3C;/h1>

      &#x3C;button
        onCl</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usestateproxy.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useStateProxy</category>
  </item>

      <item>
    <title>
      <![CDATA[ useTimeout ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--use-timeout</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--use-timeout</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    const useTimeout = (callback, delay) => {
  const refCallback = useRef();
  const refTimeout = useRef();

  useEffect(() => {
    refCallba ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    const useTimeout = (callback, delay) => {
  const refCallback = useRef();
  const refTimeout = useRef();

  useEffect(() => {
    refCallback.current = callback;
  }, [callback]);

  const set = useCallback(() => {
    refTimeout.current = setTimeout(() => refCallback.current(), delay);
  }, [delay]);

  const clear = useCallback(() => {
    refTimeout.current &#x26;&#x26; clearTimeout(refTimeout.current);
  }, []);

  useEffect(() => {
    set();
    return clear;
  }, [delay, set, c</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usetimeout.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useTimeout</category>
  </item>

      <item>
    <title>
      <![CDATA[ useToggle ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--use-toggle</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--use-toggle</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    const useToggle = (defaultValue) => {
  const [value, setValue] = useState(defaultValue);

  const toggleValue = (value) => {
    setValue( ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    const useToggle = (defaultValue) => {
  const [value, setValue] = useState(defaultValue);

  const toggleValue = (value) => {
    setValue((currentValue) => {
      return typeof value === 'boolean' ? value : !currentValue;
    });
  };

  return [value, toggleValue];
};

function ToggleComponent() {
  const [value, setToggle] = useToggle(false);

  return (
    &#x3C;div>
      &#x3C;div>Value: {`${value}`}&#x3C;/div>
      &#x3C;div>
        &#x3C;button onClick={setToggle}>Toggle&#</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usetoggle.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useToggle</category>
  </item>

      <item>
    <title>
      <![CDATA[ useWindowSize ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--use-window-size</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--use-window-size</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    const useEventListener = (eventType, callback, element = window) => {
  const refCallback = useRef(callback);

  useEffect(() => {
    refC ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    const useEventListener = (eventType, callback, element = window) => {
  const refCallback = useRef(callback);

  useEffect(() => {
    refCallback.current = callback;
  }, [callback]);

  useEffect(() => {
    const handler = (e) => refCallback.current(e);
    element.addEventListener(eventType, handler);
    return () => element.removeEventListener(eventType, handler);
  }, [eventType, element]);
};

const useWindowSize = () => {
  const [windowSize, setWindowSize] = useState({
    w</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usewindowsize.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useWindowSize</category>
  </item>

      <item>
    <title>
      <![CDATA[ useDelayedState ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--useDelayedState</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--useDelayedState</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    const emptyFunction = (...args) => {};

const useDelayedState = (initialValues) => {
  const [value, setValue] = useState(initialValues);
  ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    const emptyFunction = (...args) => {};

const useDelayedState = (initialValues) => {
  const [value, setValue] = useState(initialValues);
  const e = useRef(null);

  useEffect(function () {
    return function () {
      return clearTimeout(e.current);
    };
  }, []);

  const func = useCallback(function (a, c = 0, f = emptyFunction) {
    clearTimeout(e.current);
    e.current = null;

    if (c === 0) {
      setValue(a), f(a);
    } else {
      e.current = setTimeout(() => {
   </p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usedelayedstate.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useDelayedState</category>
  </item>

      <item>
    <title>
      <![CDATA[ useFadeEffect ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--useFadeEffect</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--useFadeEffect</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    const TIMEOUT = 1000;

const reducer = (state, action) => {
  switch (action.type) {
    case 'start':
      return {
        isTransitioni ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    const TIMEOUT = 1000;

const reducer = (state, action) => {
  switch (action.type) {
    case 'start':
      return {
        isTransitioning: true,
        shouldBeVisible: action.shouldBeVisible,
      };
    case 'finish':
      return {
        isTransitioning: false,
        shouldBeVisible: state.shouldBeVisible,
      };
    default:
      return state;
  }
};

const _popoverStyles = {
  opacity: 0,
  transitionDuration: '300ms',
  transitionProperty: 'opacity',
  transitionTim</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usefadeeffect.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useFadeEffect</category>
  </item>

      <item>
    <title>
      <![CDATA[ useMemoByObjectVariables ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--useMemoByObjectVariables</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--useMemoByObjectVariables</guid>
    <pubDate>2023-03-21T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    const aStackPool = [];
const bStackPool = [];

/**
 * Checks if two values are equal. Values may be primitives, arrays, or objects.
 * Retu ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    const aStackPool = [];
const bStackPool = [];

/**
 * Checks if two values are equal. Values may be primitives, arrays, or objects.
 * Returns true if both arguments have the same keys and values.
 *
 * @see http://underscorejs.org
 * @copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
 * @license MIT
 */
export function areEqual(a, b) {
  const aStack = aStackPool.length ? aStackPool.pop() : [];
  const bStack = bStackPool.length ? bStackPool.pop() : [];
  const result = eq(a, b</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usememobyobjectvariables.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useMemoByObjectVariables</category>
  </item>

      <item>
    <title>
      <![CDATA[ useNavigatorLanguage ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--useNavigatorLanguage</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--useNavigatorLanguage</guid>
    <pubDate>2024-06-08T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    import { useEffect, useRef, useState } from 'react';
import * as toxicity from '@tensorflow-models/toxicity';

const subscribe = (onStoreCh ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    import { useEffect, useRef, useState } from 'react';
import * as toxicity from '@tensorflow-models/toxicity';

const subscribe = (onStoreChange) => {
  window.addEventListener('languagechange', onStoreChange);
  return () => window.removeEventListener('languagechange', onStoreChange);
};

const getSnapshot = () => {
  return window.navigator.languages;
};

const useNavigatorLanguage = () => {
  return useSyncExternalStore(subscribe, getSnapshot);
};

    jsx




</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usenavigatorlanguage.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useNavigatorLanguage</category>
  </item>

      <item>
    <title>
      <![CDATA[ useTextToxicity ]]>
    </title>
    <link>https://blog.hunghg.me/issues/custom-hooks--useTextToxicity</link>
    <guid>https://blog.hunghg.me/issues/custom-hooks--useTextToxicity</guid>
    <pubDate>2024-06-08T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[



    import { useEffect, useRef, useState } from 'react';
import * as toxicity from '@tensorflow-models/toxicity';

export default function useT ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>



    import { useEffect, useRef, useState } from 'react';
import * as toxicity from '@tensorflow-models/toxicity';

export default function useTextToxicity(text, { threshold = 0.9, delay = 300 } = {}) {
  const [predictions, setPredictions] = useState(null);
  const model = useRef();

  async function predict() {
    if (!text) return;
    model.current = model.current || (await toxicity.load());
    const result = await model.current.classify([text]).catch(() => {});

    if (!result) ret</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-usetexttoxicity.png" type="image/png"/>
    <category>Reactjs</category><category>Custom Hook</category><category>useTextToxicity</category>
  </item>

      <item>
    <title>
      <![CDATA[ Valtio ]]>
    </title>
    <link>https://blog.hunghg.me/issues/state-management--valtio</link>
    <guid>https://blog.hunghg.me/issues/state-management--valtio</guid>
    <pubDate>2023-03-23T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #Demo
Valtio
Source
 ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#Demo
Valtio
Source
</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-valtio.png" type="image/png"/>
    <category>Reactjs</category><category>State management</category><category>Valtio</category>
  </item>

      <item>
    <title>
      <![CDATA[ Vscode extensions useful ]]>
    </title>
    <link>https://blog.hunghg.me/blogs/vscode-extensions-useful</link>
    <guid>https://blog.hunghg.me/blogs/vscode-extensions-useful</guid>
    <pubDate>2023-04-24T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ Extensions useful on vscode

#1. Agile CSS Suggestion
Agile CSS Suggestion
#Result

#2. CSS to Tailwindcss
CSS to Tailwindcss
#Result
 ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>Extensions useful on vscode

#1. Agile CSS Suggestion
Agile CSS Suggestion
#Result

#2. CSS to Tailwindcss
CSS to Tailwindcss
#Result
</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-vscode-extensions-useful.png" type="image/png"/>
    <category>vscode</category><category>extensions</category><category>css</category><category>tips</category>
  </item>

      <item>
    <title>
      <![CDATA[ Zustand ]]>
    </title>
    <link>https://blog.hunghg.me/issues/state-management--zustand</link>
    <guid>https://blog.hunghg.me/issues/state-management--zustand</guid>
    <pubDate>2023-03-23T00:00:00.000Z</pubDate>
    <description>
      <![CDATA[ #Demo
Zustand
Source
 ]]>
    </description>
    <content:encoded>
      <![CDATA[ <p>#Demo
Zustand
Source
</p> ]]>
    </content:encoded>
    <author>giahung197bg@gmail.com (Hung Hoang)</author>
    <enclosure url="https://blog.hunghg.me/og-zustand.png" type="image/png"/>
    <category>Reactjs</category><category>State management</category><category>Zustand</category>
  </item>



</channel>
</rss>
